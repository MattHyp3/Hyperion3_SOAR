{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Identifier Reputation Analysis",
    "coa": {
        "data": {
            "description": "Accepts a URL, IP, Domain, or File_Hash and does reputation analysis on the objects. Generates a global report and a per observable sub-report and normalized score. The score can be customized based on a variety of factors.\n\nRef: https://d3fend.mitre.org/technique/d3f:IdentifierReputationAnalysis/",
            "edges": [
                {
                    "id": "port_5_to_port_6",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_2_to_port_27",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "27",
                    "targetPort": "27_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_27_to_port_9",
                    "sourceNode": "27",
                    "sourcePort": "27_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_9_to_port_5",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_0_to_port_32",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "32",
                    "targetPort": "32_in"
                },
                {
                    "id": "port_32_to_port_33",
                    "sourceNode": "32",
                    "sourcePort": "32_out",
                    "targetNode": "33",
                    "targetPort": "33_in"
                },
                {
                    "id": "port_33_to_port_34",
                    "sourceNode": "33",
                    "sourcePort": "33_out",
                    "targetNode": "34",
                    "targetPort": "34_in"
                },
                {
                    "id": "port_34_to_port_2",
                    "sourceNode": "34",
                    "sourcePort": "34_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_6_to_port_35",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "35",
                    "targetPort": "35_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_27_to_port_37",
                    "sourceNode": "27",
                    "sourcePort": "27_out",
                    "targetNode": "37",
                    "targetPort": "37_in"
                },
                {
                    "id": "port_37_to_port_1",
                    "sourceNode": "37",
                    "sourcePort": "37_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_35_to_port_38",
                    "sourceNode": "35",
                    "sourcePort": "35_out",
                    "targetNode": "38",
                    "targetPort": "38_in"
                },
                {
                    "id": "port_38_to_port_1",
                    "sourceNode": "38",
                    "sourcePort": "38_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "globalCustomCode": "from math import log",
            "hash": "a8238a3c739344494a1e62969d380c8f4791d45f",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 540,
                    "y": 0
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "warnings": {},
                    "x": 1020,
                    "y": 980
                },
                "2": {
                    "data": {
                        "action": "url reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "url reputation",
                            "customNameId": 0,
                            "description": "Queries VirusTotal for information about the provided URL(s)",
                            "join": [],
                            "note": "Queries VirusTotal for information about the provided URL(s)"
                        },
                        "connector": "VirusTotal v3",
                        "connectorConfigs": [
                            "vtv3"
                        ],
                        "connectorId": "3fe4875d-a4a7-47d3-9ef1-f9e63a6653a4",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "url_reputation",
                        "id": "2",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "url": "fanged_urls:formatted_data.*"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "url"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "warnings": {},
                    "x": 520,
                    "y": 480
                },
                "27": {
                    "data": {
                        "advanced": {
                            "customName": "url result filter",
                            "customNameId": 0,
                            "delimiter": ",",
                            "delimiter_enabled": true,
                            "description": "Filters successful url reputation results.",
                            "join": [],
                            "note": "Filters successful url reputation results."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "url_reputation:action_result.status",
                                        "value": "success"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "success",
                                "logic": "and"
                            },
                            {
                                "comparisons": [
                                    {
                                        "op": "==",
                                        "param": "url_reputation:action_result.status",
                                        "value": "failed"
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "failure",
                                "logic": "and"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "url_result_filter",
                        "id": "27",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "27",
                    "type": "filter",
                    "warnings": {},
                    "x": 580,
                    "y": 640
                },
                "32": {
                    "data": {
                        "advanced": {
                            "customName": "List URLs as array",
                            "customNameId": 0,
                            "drop_none": true,
                            "join": []
                        },
                        "functionId": 5,
                        "functionName": "list_urls_as_array",
                        "id": "32",
                        "parameters": [
                            "playbook_input:url"
                        ],
                        "template": "%%\n{0}\n%%",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "32",
                    "type": "format",
                    "warnings": {},
                    "x": 520,
                    "y": 120
                },
                "33": {
                    "data": {
                        "advanced": {
                            "customName": "Refang URLs",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 9,
                        "functionName": "refang_urls",
                        "id": "33",
                        "inputParameters": [
                            "list_urls_as_array:formatted_data.*"
                        ],
                        "outputVariables": [
                            "refanged_url"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "33",
                    "type": "code",
                    "userCode": "\n    def refang(defanged_urls):\n        refanged_urls = []\n        \n   # interate over the list of urls\n        for url in defanged_urls:\n            if url == None or len(url) == 0:\n                # skip empty urls\n                continue\n                \n            phantom.debug(\"Before refang: {}\".format(url))\n            \n            url = url.replace(\"hxxp\", \"http\")\n            url = url.replace(\"[.]\", \".\")\n            url = url.replace(\"[at]\", \"@\")\n            url = url.replace(\"\\\\\", \"\")\n\n            phantom.debug(\"After refang: {}\".format(url))\n            \n            refanged_urls.append(url)\n            \n        return refanged_urls\n            \n\n    phantom.debug(list_urls_as_array__as_list)\n    refang_url__refanged_url = refang(list_urls_as_array__as_list)\n\n",
                    "warnings": {},
                    "x": 520,
                    "y": 240
                },
                "34": {
                    "data": {
                        "advanced": {
                            "customName": "fanged URLs",
                            "customNameId": 0,
                            "drop_none": true,
                            "join": []
                        },
                        "functionId": 6,
                        "functionName": "fanged_urls",
                        "id": "34",
                        "parameters": [
                            "refang_urls:custom_function:refanged_url"
                        ],
                        "template": "%%\n{0}\n%%",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "34",
                    "type": "format",
                    "warnings": {},
                    "x": 520,
                    "y": 360
                },
                "35": {
                    "data": {
                        "action": "update event",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Update notable results found",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunkes"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "customDatapaths": {
                            "artifacts": {
                                "artifact:*.cef.event_id": {
                                    "contains": [],
                                    "isCustomDatapath": true,
                                    "label": "artifact:*.cef.event_id",
                                    "value": "artifact:*.cef.event_id"
                                }
                            }
                        },
                        "functionId": 1,
                        "functionName": "update_notable_results_found",
                        "id": "35",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "comment": "format_report_url:formatted_data",
                            "event_ids": "artifact:*.cef.event_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "event_ids"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "35",
                    "type": "action",
                    "warnings": {},
                    "x": 1200,
                    "y": 119.99999999999997
                },
                "37": {
                    "data": {
                        "action": "update event",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Update notable no results",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunkes"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "customDatapaths": {
                            "artifacts": {
                                "artifact:*.cef.event_id": {
                                    "contains": [],
                                    "isCustomDatapath": true,
                                    "label": "artifact:*.cef.event_id",
                                    "value": "artifact:*.cef.event_id"
                                }
                            }
                        },
                        "functionId": 2,
                        "functionName": "update_notable_no_results",
                        "id": "37",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "comment": {
                                "functionId": 2,
                                "parameters": [
                                    "list_urls_as_array:formatted_data"
                                ],
                                "template": "Not results found for URLs\n{0}\nConsider submitting for detonation\n"
                            },
                            "event_ids": "artifact:*.cef.event_id",
                            "wait_for_confirmation": true
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "event_ids"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "37",
                    "type": "action",
                    "warnings": {},
                    "x": 740,
                    "y": 820
                },
                "38": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "add_note_1",
                        "id": "38",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "add_note": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "title",
                                        "name": "title",
                                        "placeholder": "Enter a note title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "content",
                                        "name": "content",
                                        "placeholder": "Enter the note content",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "markdown",
                                            "html"
                                        ],
                                        "default": "markdown",
                                        "description": "",
                                        "label": "note format",
                                        "name": "note_format",
                                        "placeholder": "Enter the note content",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "default": "general",
                                        "hidden": true,
                                        "name": "note_type",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "event_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "task_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add note",
                                "name": "add_note"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "add_note": {
                                "_internal": [
                                    "container",
                                    "note_type",
                                    "author",
                                    "event_id",
                                    "task_id",
                                    "trace"
                                ],
                                "content": "format_report_url:formatted_data",
                                "note_format": "markdown",
                                "note_type": "general",
                                "title": "Virus Total Scan results"
                            }
                        }
                    },
                    "errors": {},
                    "id": "38",
                    "type": "utility",
                    "warnings": {},
                    "x": 1200,
                    "y": 304.5
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "format report url",
                            "customNameId": 0,
                            "description": "Format a summary table with the information gathered from the playbook.",
                            "join": [],
                            "note": "Format a summary table with the information gathered from the playbook."
                        },
                        "functionId": 1,
                        "functionName": "format_report_url",
                        "id": "5",
                        "parameters": [
                            "filtered-data:url_result_filter:condition_1:url_reputation:action_result.parameter.url",
                            "normalize_score_url:custom_function:score",
                            "normalize_score_url:custom_function:categories",
                            "filtered-data:url_result_filter:condition_1:url_reputation:action_result.data.*.id"
                        ],
                        "template": "SOAR analyzed URL(s) using VirusTotal.  The table below shows a summary of the information gathered.\n\n| URL | Normalized Score | Categories | Report Link | Source |\n| --- | --- | --- | --- | --- |\n%%\n| `{0}` | {1} | {2} | https://www.virustotal.com/gui/url/{3} | VirusTotal v3 |\n%%",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "format",
                    "warnings": {},
                    "x": 860,
                    "y": 300
                },
                "6": {
                    "data": {
                        "advanced": {
                            "customName": "build url output",
                            "customNameId": 0,
                            "description": "Generate an observable dictionary to output into the observables data path.",
                            "join": [],
                            "note": "Generate an observable dictionary to output into the observables data path."
                        },
                        "functionId": 1,
                        "functionName": "build_url_output",
                        "id": "6",
                        "inputParameters": [
                            "filtered-data:url_result_filter:condition_1:url_reputation:action_result.parameter.url",
                            "filtered-data:url_result_filter:condition_1:url_reputation:action_result.data.*.id",
                            "normalize_score_url:custom_function:url_score_object"
                        ],
                        "outputVariables": [
                            "observable_array"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "code",
                    "userCode": "    from urllib.parse import urlparse\n    build_url_output__observable_array = []\n\n    # Build URL\n    for url, external_id, url_object in zip(filtered_result_0_parameter_url, filtered_result_0_data___id, normalize_score_url__url_score_object):\n        parsed_url = urlparse(url)\n        observable_object = {\n            \"value\": url,\n            \"type\": \"url\",\n            \"reputation\": {\n                \"score_id\": url_object['score_id'],\n                \"score\": url_object['score'],\n                \"confidence\": url_object['confidence']\n            },\n            \"attributes\": {\n                \"hostname\": parsed_url.hostname,\n                \"scheme\": parsed_url.scheme\n            },\n            \"categories\": url_object['categories'],\n            \"source\": \"VirusTotal v3\",\n            \"source_link\": f\"https://www.virustotal.com/gui/url/{external_id}\"\n        }\n        if parsed_url.path:\n            observable_object['attributes']['path'] = parsed_url.path\n        if parsed_url.query:\n            observable_object['attributes']['query'] = parsed_url.query\n        if parsed_url.port:\n            observable_object['attributes']['port'] = parsed_url.port\n        \n        build_url_output__observable_array.append(observable_object)\n            \n",
                    "warnings": {},
                    "x": 860,
                    "y": 480
                },
                "9": {
                    "data": {
                        "advanced": {
                            "customName": "normalize score url",
                            "customNameId": 0,
                            "description": "Contains custom code for normalizing score. Adjust the logic as desired in the documented sections.",
                            "join": [],
                            "note": "Contains custom code for normalizing score. Adjust the logic as desired in the documented sections."
                        },
                        "functionId": 2,
                        "functionName": "normalize_score_url",
                        "id": "9",
                        "inputParameters": [
                            "filtered-data:url_result_filter:condition_1:url_reputation:action_result.data.*.attributes.categories",
                            "filtered-data:url_result_filter:condition_1:url_reputation:action_result.summary"
                        ],
                        "outputVariables": [
                            "url_score_object",
                            "score",
                            "categories"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "code",
                    "userCode": "    \n    # Reference for scores: https://schema.ocsf.io/objects/reputation\n    score_table = {\n        \"0\":\"Unknown\",\n        \"1\":\"Very_Safe\",\n        \"2\":\"Safe\",\n        \"3\":\"Probably_Safe\",\n        \"4\":\"Leans_Safe\",\n        \"5\":\"May_not_be_Safe\",\n        \"6\":\"Exercise_Caution\",\n        \"7\":\"Suspicious_or_Risky\",\n        \"8\":\"Possibly_Malicious\",\n        \"9\":\"Probably_Malicious\",\n        \"10\":\"Malicious\"\n    }\n    \n    # Assign Variables\n    url_categories_list = filtered_result_0_data___attributes_categories\n    url_summary_list = filtered_result_0_summary\n    normalize_score_url__url_score_object = []\n    normalize_score_url__score = []\n    normalize_score_url__categories = []\n    \n    # VirusTotal v3 URL Data\n    # Adjust logic as desired\n    for category, summary_data in zip(url_categories_list, url_summary_list):\n\n        # Set confidence based on percentage of vendors undetected\n        # Reduce the confidence by percentage of vendors undetected.\n        vendors = summary_data['harmless'] + summary_data['undetected'] + summary_data['malicious'] + summary_data['suspicious']\n        confidence = 100 - int((summary_data['undetected']/vendors) * 100)\n        \n        # Normalize reputation on a 10 point scale based on number of malicious and suspicious divided by harmless vendors\n        # This can be adjusted to include whatever logic is desired.\n        suspect = summary_data['malicious'] + summary_data['suspicious']\n        # If there are only harmless verdicts and no suspicious entries, set score_id to 1.\n        if summary_data['harmless'] and not suspect:\n            score_id = 1\n        else:\n            if suspect and vendors:\n                # customize score calculation as desired\n                log_result = log((suspect/vendors) * 100, 100) # log imported from math in global code block\n                score_id = int(log_result * 10) + 3\n            \n                if score_id > 10:\n                    score_id = 10\n                    \n            elif suspect == 0:\n                score_id = 0\n        \n        categories = [cat.lower() for cat in category.values()]\n        categories = list(set(categories))\n        \n        score = score_table[str(score_id)]\n        \n        # Attach final object\n        normalize_score_url__url_score_object.append({'score': score, 'score_id': score_id, 'confidence': confidence, 'categories': categories})\n        normalize_score_url__score.append(score)\n        normalize_score_url__categories.append(categories)\n\n",
                    "warnings": {},
                    "x": 860,
                    "y": 120
                }
            },
            "notes": "Inputs: url, ip, domain, file_hash\nInteractions: VirusTotal v3\nActions: url reputation, ip reputation, domain reputation, file reputation\nOutputs: report, observables",
            "origin": {
                "playbook_id": 326,
                "playbook_name": "Input-Enrichment VirusTotal File and Domain ",
                "playbook_repo_id": 15,
                "playbook_repo_name": "Hyperion3"
            }
        },
        "input_spec": [
            {
                "contains": [
                    "url"
                ],
                "description": "A URL provided for reputation analysis",
                "name": "url"
            }
        ],
        "output_spec": [
            {
                "contains": [],
                "datapaths": [
                    "build_url_output:custom_function:observable_array",
                    "build_domain_output:custom_function:observable_array",
                    "build_ip_output:custom_function:observable_array",
                    "build_file_hash_output:custom_function:observable_array"
                ],
                "deduplicate": false,
                "description": "An array of observable dictionaries with value, type, score, score_id, and categories.",
                "metadata": {},
                "name": "observable"
            },
            {
                "contains": [],
                "datapaths": [
                    "format_report_url:formatted_data",
                    "format_report_domain:formatted_data",
                    "format_report_ip:formatted_data",
                    "format_report_file:formatted_data"
                ],
                "deduplicate": false,
                "description": "An array of reports. One report per reputation category.",
                "metadata": {},
                "name": "markdown_report"
            }
        ],
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.11",
        "version": "6.2.0.355"
    },
    "create_time": "2024-04-03T11:26:26.512038+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": [
        "reputation",
        "url",
        "ip",
        "domain",
        "file_hash",
        "D3-IRA",
        "D3-URA",
        "D3-DNRA",
        "D3-IPRA",
        "D3-FHRA",
        "VirusTotal_v3"
    ]
}