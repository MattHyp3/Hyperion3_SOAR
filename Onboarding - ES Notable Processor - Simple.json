{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Risk Notable",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_5_to_port_7",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_7_to_port_8",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "id": "port_11_to_port_13",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "id": "port_7_to_port_11",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_8_to_port_10",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_7_to_port_14",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "id": "port_14_to_port_15",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "id": "port_15_to_port_16",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "id": "port_16_to_port_1",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_10_to_port_1",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_13_to_port_1",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_7_to_port_17",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "id": "port_17_to_port_18",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_18_to_port_19",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "id": "port_19_to_port_20",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "id": "port_20_to_port_21",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "21",
                    "targetPort": "21_in"
                },
                {
                    "id": "port_21_to_port_1",
                    "sourceNode": "21",
                    "sourcePort": "21_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_7_to_port_22",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "22",
                    "targetPort": "22_in"
                },
                {
                    "id": "port_22_to_port_23",
                    "sourceNode": "22",
                    "sourcePort": "22_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_23_to_port_24",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "id": "port_24_to_port_25",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                },
                {
                    "id": "port_25_to_port_1",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_0_to_port_5",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                }
            ],
            "hash": "25643e357a941b7711b2461ed1ccb35df2e43ee2",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 700,
                    "y": -9.592326932761353e-14
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "warnings": {},
                    "x": 700,
                    "y": 1308
                },
                "10": {
                    "data": {
                        "advanced": {
                            "customName": "pin es url",
                            "customNameId": 0,
                            "description": "Pin the Enterprise Security URL",
                            "join": [],
                            "note": "Pin the Enterprise Security URL",
                            "refreshNotableData": true
                        },
                        "functionId": 5,
                        "functionName": "pin_es_url",
                        "id": "10",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "pin": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "message",
                                        "name": "message",
                                        "placeholder": "Enter a message",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "data",
                                        "name": "data",
                                        "placeholder": "Enter a value",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "card",
                                            "data"
                                        ],
                                        "description": "",
                                        "label": "pin type",
                                        "name": "pin_type",
                                        "placeholder": "Select pin type",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "grey",
                                            "blue",
                                            "red"
                                        ],
                                        "description": "",
                                        "label": "pin color",
                                        "name": "pin_style",
                                        "placeholder": "Select pin color",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "Use a named pin",
                                        "renderType": "input",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "truncate",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "pin",
                                "name": "pin"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "pin": {
                                "_internal": [
                                    "container",
                                    "author",
                                    "truncate",
                                    "trace"
                                ],
                                "data": "format_es_url:formatted_data",
                                "message": "Enterprise Security URL",
                                "name": "es_url",
                                "pin_style": "grey",
                                "pin_type": "card"
                            }
                        }
                    },
                    "errors": {},
                    "id": "10",
                    "type": "utility",
                    "warnings": {},
                    "x": 340,
                    "y": 1130
                },
                "11": {
                    "data": {
                        "advanced": {
                            "customName": "format es note",
                            "customNameId": 0,
                            "description": "Format a note with the current event information.",
                            "join": [],
                            "note": "Format a note with the current event information.",
                            "scope": "all"
                        },
                        "functionId": 2,
                        "functionName": "format_es_note",
                        "id": "11",
                        "parameters": [
                            "container:id",
                            "container:url"
                        ],
                        "template": "SOAR event created: {0}\nComplete details can be found here: {1}/analyst/timeline\n\nClosing Notable with confirmed receipt",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "format",
                    "warnings": {},
                    "x": 680,
                    "y": 952
                },
                "13": {
                    "data": {
                        "action": "update event",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "update notable",
                            "customNameId": 0,
                            "description": "Update the notable event  in Enterprise Security with a link back to this container",
                            "join": [],
                            "note": "Update the notable event in Enterprise Security with a link back to this container",
                            "scope": "all"
                        },
                        "connector": "Splunk",
                        "connectorConfigs": [
                            "splunkes"
                        ],
                        "connectorId": "91883aa8-9c81-470b-97a1-5d8f7995f560",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "update_notable",
                        "id": "13",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "comment": "format_es_note:formatted_data",
                            "event_ids": "artifact:*.cef.event_id",
                            "status": "closed",
                            "wait_for_confirmation": true
                        },
                        "requiredParameters": [
                            {
                                "data_type": "",
                                "default": "",
                                "field": "event_ids"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "13",
                    "type": "action",
                    "warnings": {},
                    "x": 680,
                    "y": 1130
                },
                "14": {
                    "data": {
                        "advanced": {
                            "customName": "format event name",
                            "customNameId": 0,
                            "description": "Format the event name as 'Source: Risk Object'",
                            "drop_none": true,
                            "join": [],
                            "note": "Format the event name as 'Source: Risk Object'",
                            "scope": "all"
                        },
                        "functionId": 3,
                        "functionName": "format_event_name",
                        "id": "14",
                        "parameters": [
                            "artifact:*.cef.source"
                        ],
                        "template": "{0}",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "14",
                    "type": "format",
                    "warnings": {},
                    "x": 0,
                    "y": 773
                },
                "15": {
                    "data": {
                        "advanced": {
                            "customName": "container update info",
                            "customNameId": 0,
                            "join": [],
                            "scope": "all"
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "container_update",
                            "repoName": "community"
                        },
                        "functionId": 4,
                        "functionName": "container_update_info",
                        "id": "15",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "container_update": {
                                "description": "Allows updating various attributes of a container in a single custom function. Any attributes of a container not listed can be updated via the input_json parameter. ",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Supports a container id or container dictionary",
                                        "inputType": "item",
                                        "label": "container_input",
                                        "name": "container_input",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change container name",
                                        "inputType": "item",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "My Container Name",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change the container description",
                                        "inputType": "item",
                                        "label": "description",
                                        "name": "description",
                                        "placeholder": "My Container Description",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container label"
                                        ],
                                        "description": "Optional parameter to change the container label",
                                        "inputType": "item",
                                        "label": "label",
                                        "name": "label",
                                        "placeholder": "my_label",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change the container owner. Accepts a username or role name or keyword \"current\" to set the currently running playbook user as the owner.",
                                        "inputType": "item",
                                        "label": "owner",
                                        "name": "owner",
                                        "placeholder": "admin",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change the container sensitivity. ",
                                        "inputType": "item",
                                        "label": "sensitivity",
                                        "name": "sensitivity",
                                        "placeholder": "amber",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change the container severity.",
                                        "inputType": "item",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change the container status.",
                                        "inputType": "item",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "open",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change the container tags. Must be in the format of a comma separated list.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1, tag2",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to modify any extra attributes of a container. Input_json will be merged with other inputs. In the event of a conflict, input_json will take precedence.",
                                        "inputType": "item",
                                        "label": "input_json",
                                        "name": "input_json",
                                        "placeholder": "{\"custom_fields\": {\"field_name\": \"field_value\"}}",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "container_update",
                                "name": "container_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "container_update": {
                                "container_input": "container:id",
                                "description": "artifact:*.cef.source",
                                "input_json": null,
                                "label": null,
                                "name": "format_event_name:formatted_data",
                                "owner": null,
                                "sensitivity": null,
                                "severity": "artifact:*.cef.urgency",
                                "status": null,
                                "tags": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "15",
                    "type": "utility",
                    "warnings": {},
                    "x": 0,
                    "y": 967
                },
                "16": {
                    "data": {
                        "advanced": {
                            "customName": "artifact update severity",
                            "customNameId": 0,
                            "join": [],
                            "scope": "all"
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "artifact_update",
                            "repoName": "community"
                        },
                        "functionId": 6,
                        "functionName": "artifact_update_severity",
                        "id": "16",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "artifact_update": {
                                "description": "Update an artifact with the specified attributes. All parameters are optional, except that an artifact_id must be provided and if one of cef_field or cef_value is provided then they must both be provided. Supports all fields available in /rest/artifact. Add any unlisted inputs as dictionary keys in input_json. Unsupported keys will automatically be dropped.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom artifact id"
                                        ],
                                        "description": "ID of the artifact to update, which is required unless artifact_id is a key within input_json",
                                        "inputType": "item",
                                        "label": "artifact_id",
                                        "name": "artifact_id",
                                        "placeholder": "1234",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Change the name of the artifact.",
                                        "inputType": "item",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "artifact",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "Change the label of the artifact.",
                                        "inputType": "item",
                                        "label": "label",
                                        "name": "label",
                                        "placeholder": "events",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Change the severity of the artifact. Typically this is either \"High\", \"Medium\", or \"Low\".",
                                        "inputType": "item",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the CEF field to populate in the artifact, such as \"destinationAddress\" or \"sourceDnsDomain\". Required only if cef_value is provided.",
                                        "inputType": "item",
                                        "label": "cef_field",
                                        "name": "cef_field",
                                        "placeholder": "destinationAddress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The value of the CEF field to populate in the artifact, such as the IP address, domain name, or file hash. Required only if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_value",
                                        "name": "cef_value",
                                        "placeholder": "192.0.2.192",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The CEF data type of the data in cef_value. For example, this could be \"ip\", \"hash\", or \"domain\". Optional, but only operational if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_data_type",
                                        "name": "cef_data_type",
                                        "placeholder": "ip",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A comma-separated list of tags to apply to the artifact, which is optional.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1, tag2, tag3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional input. Either True or False with default as False. If set to True, existing tags on the indicator record will be replaced by the provided input. If set to False, the new tags will be appended to the existing indicator tags.",
                                        "inputType": "item",
                                        "label": "overwrite_tags",
                                        "name": "overwrite_tags",
                                        "placeholder": "True or False",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to modify any extra attributes of the artifact. Input_json will be merged with other inputs. In the event of a conflict, input_json will take precedence.",
                                        "inputType": "item",
                                        "label": "input_json",
                                        "name": "input_json",
                                        "placeholder": "{\"source_data_identifier\": \"1234\", \"data\": \"5678\"}",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "artifact_update",
                                "name": "artifact_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "artifact_update": {
                                "artifact_id": "artifact:*.id",
                                "cef_data_type": null,
                                "cef_field": null,
                                "cef_value": null,
                                "input_json": null,
                                "label": null,
                                "name": null,
                                "overwrite_tags": null,
                                "severity": null,
                                "tags": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "16",
                    "type": "utility",
                    "warnings": {},
                    "x": -1.4210854715202004e-14,
                    "y": 1140
                },
                "17": {
                    "data": {
                        "advanced": {
                            "customName": "format multi urls",
                            "customNameId": 0,
                            "drop_none": true,
                            "join": []
                        },
                        "functionId": 4,
                        "functionName": "format_multi_urls",
                        "id": "17",
                        "parameters": [
                            "artifact:*.cef.urls"
                        ],
                        "template": "{0}\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "format",
                    "warnings": {},
                    "x": 1020,
                    "y": 444
                },
                "18": {
                    "data": {
                        "advanced": {
                            "customName": "Multi URLS exist",
                            "customNameId": 0,
                            "delimiter": ",",
                            "delimiter_enabled": true,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "format_multi_urls:formatted_data",
                                        "value": "None"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "URLs Exist",
                                "logic": "and"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "multi_urls_exist",
                        "id": "18",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "18",
                    "type": "filter",
                    "warnings": {},
                    "x": 1080,
                    "y": 592
                },
                "19": {
                    "data": {
                        "advanced": {
                            "customName": "clean_url_code",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "clean_url_code",
                        "id": "19",
                        "inputParameters": [
                            "format_multi_urls:formatted_data"
                        ],
                        "outputVariables": [
                            "url_string"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "code",
                    "userCode": "\n    def clean(clean_string):\n        if clean_string == None or len(clean_string) == 0:\n            phantom.debug(\"Nothing detected in urls!\")\n            return clean_string\n        else:\n            phantom.debug(\"before clean {}\".format(clean_string))\n            clean_string = clean_string.replace(\"[\", \"\")\n            clean_string = clean_string.replace(\"]\", \"\")\n            clean_string = clean_string.replace(\"'\", \"\")             \n            phantom.debug(\"after clean {}\".format(clean_string))\n            return clean_string\n            \n\n    phantom.debug(format_multi_urls)\n    clean_url_code__url_string = clean(format_multi_urls)\n\n",
                    "warnings": {},
                    "x": 1020,
                    "y": 788
                },
                "20": {
                    "data": {
                        "advanced": {
                            "customName": "urls split",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "string_split",
                            "repoName": "community"
                        },
                        "functionId": 7,
                        "functionName": "urls_split",
                        "id": "20",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "string_split": {
                                "description": "Return a list of the components of input_string when split using the specified delimiter. If strip_whitespace is not specified or is \"True\", strip all whitespace from the beginning and end of each resulting component.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The string to split",
                                        "inputType": "item",
                                        "label": "input_string",
                                        "name": "input_string",
                                        "placeholder": "item_1, item_2, item_3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The delimiter to split by, which defaults to a comma",
                                        "inputType": "item",
                                        "label": "delimiter",
                                        "name": "delimiter",
                                        "placeholder": ",",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Either True or False to indicate whether or not to remove whitespace before and after each item. Defaults to True",
                                        "inputType": "item",
                                        "label": "strip_whitespace",
                                        "name": "strip_whitespace",
                                        "placeholder": "True",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "string_split",
                                "name": "string_split"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "string_split": {
                                "delimiter": ",",
                                "input_string": "clean_url_code:custom_function:url_string",
                                "strip_whitespace": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "20",
                    "type": "utility",
                    "warnings": {},
                    "x": 1020,
                    "y": 967
                },
                "21": {
                    "data": {
                        "advanced": {
                            "customName": "Create URL Artifacts",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "artifact_create",
                            "repoName": "community"
                        },
                        "functionId": 8,
                        "functionName": "create_url_artifacts",
                        "id": "21",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "artifact_create": {
                                "description": "Create a new artifact with the specified attributes. Supports all fields available in /rest/artifact. Add any unlisted inputs as dictionary keys in input_json. Unsupported keys will automatically be dropped.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Container which the artifact will be added to.",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the new artifact, which is optional and defaults to \"artifact\".",
                                        "inputType": "item",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "artifact",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The label of the new artifact, which is optional and defaults to \"events\"",
                                        "inputType": "item",
                                        "label": "label",
                                        "name": "label",
                                        "placeholder": "events",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "The severity of the new artifact, which is optional and defaults to \"Medium\". Typically this is either \"High\", \"Medium\", or \"Low\".",
                                        "inputType": "item",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the CEF field to populate in the artifact, such as \"destinationAddress\" or \"sourceDnsDomain\". Required only if cef_value is provided.",
                                        "inputType": "item",
                                        "label": "cef_field",
                                        "name": "cef_field",
                                        "placeholder": "destinationAddress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The value of the CEF field to populate in the artifact, such as the IP address, domain name, or file hash. Required only if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_value",
                                        "name": "cef_value",
                                        "placeholder": "192.0.2.192",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The CEF data type of the data in cef_value. For example, this could be \"ip\", \"hash\", or \"domain\". Optional.",
                                        "inputType": "item",
                                        "label": "cef_data_type",
                                        "name": "cef_data_type",
                                        "placeholder": "ip",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A comma-separated list of tags to apply to the created artifact, which is optional.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1, tag2, tag3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Either \"true\" or \"false\", depending on whether or not the new artifact should trigger the execution of any playbooks that are set to active on the label of the container the artifact will be added to. Optional and defaults to \"false\".",
                                        "inputType": "item",
                                        "label": "run_automation",
                                        "name": "run_automation",
                                        "placeholder": "false",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to modify any extra attributes of the artifact. Input_json will be merged with other inputs. In the event of a conflict, input_json will take precedence.",
                                        "inputType": "item",
                                        "label": "input_json",
                                        "name": "input_json",
                                        "placeholder": "{\"source_data_identifier\": \"1234\", \"data\": \"5678\"}",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "artifact_create",
                                "name": "artifact_create"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "artifact_create": {
                                "cef_data_type": null,
                                "cef_field": "artifact_url",
                                "cef_value": "urls_split:custom_function_result.data.*.item",
                                "container": "container:id",
                                "input_json": null,
                                "label": null,
                                "name": "url",
                                "run_automation": null,
                                "severity": null,
                                "tags": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "21",
                    "type": "utility",
                    "warnings": {},
                    "x": 1020,
                    "y": 1145
                },
                "22": {
                    "data": {
                        "advanced": {
                            "customName": "format single url",
                            "customNameId": 0,
                            "drop_none": true,
                            "join": []
                        },
                        "functionId": 5,
                        "functionName": "format_single_url",
                        "id": "22",
                        "parameters": [
                            "artifact:*.cef.url"
                        ],
                        "template": "{0}\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "22",
                    "type": "format",
                    "warnings": {},
                    "x": 1360,
                    "y": 608
                },
                "23": {
                    "data": {
                        "advanced": {
                            "customName": "single url exists",
                            "customNameId": 0,
                            "delimiter": ",",
                            "delimiter_enabled": true,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "format_single_url:formatted_data",
                                        "value": "None"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "URL Exist",
                                "logic": "and"
                            }
                        ],
                        "functionId": 3,
                        "functionName": "single_url_exists",
                        "id": "23",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "23",
                    "type": "filter",
                    "warnings": {},
                    "x": 1420,
                    "y": 772
                },
                "24": {
                    "data": {
                        "advanced": {
                            "customName": "clean_url_code",
                            "customNameId": 1,
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "clean_url_code_1",
                        "id": "24",
                        "inputParameters": [
                            "format_single_url:formatted_data"
                        ],
                        "outputVariables": [
                            "url_string"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "24",
                    "type": "code",
                    "userCode": "\n    def clean(clean_string):\n        if clean_string == None or len(clean_string) == 0:\n            phantom.debug(\"Nothing detected in urls!\")\n            return clean_string\n        else:\n            phantom.debug(\"before clean {}\".format(clean_string))\n            clean_string = clean_string.replace(\"[\", \"\")\n            clean_string = clean_string.replace(\"]\", \"\")\n            clean_string = clean_string.replace(\"'\", \"\")             \n            phantom.debug(\"after clean {}\".format(clean_string))\n            return clean_string\n            \n\n    phantom.debug(format_single_url)\n    clean_url_code_1__url_string = clean(format_single_url)\n    \n",
                    "warnings": {},
                    "x": 1360,
                    "y": 967
                },
                "25": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "artifact_create",
                            "repoName": "community"
                        },
                        "functionId": 9,
                        "functionName": "artifact_create_9",
                        "id": "25",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "artifact_create": {
                                "description": "Create a new artifact with the specified attributes. Supports all fields available in /rest/artifact. Add any unlisted inputs as dictionary keys in input_json. Unsupported keys will automatically be dropped.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Container which the artifact will be added to.",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the new artifact, which is optional and defaults to \"artifact\".",
                                        "inputType": "item",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "artifact",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The label of the new artifact, which is optional and defaults to \"events\"",
                                        "inputType": "item",
                                        "label": "label",
                                        "name": "label",
                                        "placeholder": "events",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "The severity of the new artifact, which is optional and defaults to \"Medium\". Typically this is either \"High\", \"Medium\", or \"Low\".",
                                        "inputType": "item",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "Medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The name of the CEF field to populate in the artifact, such as \"destinationAddress\" or \"sourceDnsDomain\". Required only if cef_value is provided.",
                                        "inputType": "item",
                                        "label": "cef_field",
                                        "name": "cef_field",
                                        "placeholder": "destinationAddress",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The value of the CEF field to populate in the artifact, such as the IP address, domain name, or file hash. Required only if cef_field is provided.",
                                        "inputType": "item",
                                        "label": "cef_value",
                                        "name": "cef_value",
                                        "placeholder": "192.0.2.192",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "The CEF data type of the data in cef_value. For example, this could be \"ip\", \"hash\", or \"domain\". Optional.",
                                        "inputType": "item",
                                        "label": "cef_data_type",
                                        "name": "cef_data_type",
                                        "placeholder": "ip",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A comma-separated list of tags to apply to the created artifact, which is optional.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1, tag2, tag3",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Either \"true\" or \"false\", depending on whether or not the new artifact should trigger the execution of any playbooks that are set to active on the label of the container the artifact will be added to. Optional and defaults to \"false\".",
                                        "inputType": "item",
                                        "label": "run_automation",
                                        "name": "run_automation",
                                        "placeholder": "false",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to modify any extra attributes of the artifact. Input_json will be merged with other inputs. In the event of a conflict, input_json will take precedence.",
                                        "inputType": "item",
                                        "label": "input_json",
                                        "name": "input_json",
                                        "placeholder": "{\"source_data_identifier\": \"1234\", \"data\": \"5678\"}",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "artifact_create",
                                "name": "artifact_create"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "artifact_create": {
                                "cef_data_type": null,
                                "cef_field": "artifact_domain",
                                "cef_value": "clean_url_code_1:custom_function:url_string",
                                "container": "container:id",
                                "input_json": null,
                                "label": null,
                                "name": "domain",
                                "run_automation": null,
                                "severity": null,
                                "tags": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "25",
                    "type": "utility",
                    "warnings": {},
                    "x": 1360,
                    "y": 1145
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "mark evidence artifact",
                            "customNameId": 0,
                            "join": [],
                            "scope": "all"
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "mark_evidence",
                            "repoName": "community"
                        },
                        "functionId": 2,
                        "functionName": "mark_evidence_artifact",
                        "id": "5",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "mark_evidence": {
                                "description": "Mark an object as Evidence in a container",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Container ID or Container Object",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The object to mark as evidence. This could be a vault_id, artifact_id, note_id, container_id, or action_run_id. If the previous playbook block is an action then \"keyword_argument:results\" can be used for the action_run_id with the content_type \"action_run_id\". Vault_id can be an ID or a vault hash.",
                                        "inputType": "item",
                                        "label": "input_object",
                                        "name": "input_object",
                                        "placeholder": "artifact id, note id, vault_id, etc.",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "The content type of the object to add as evidence which must be one of the following:\n            \n            vault_id\n            artifact_id\n            container_id\n            note_id\n            action_run_id",
                                        "inputType": "item",
                                        "label": "content_type",
                                        "name": "content_type",
                                        "placeholder": "See help text for supported types",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "mark_evidence",
                                "name": "mark_evidence"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "mark_evidence": {
                                "container": "container:id",
                                "content_type": "event_id",
                                "input_object": "artifact:*.cef.event_id"
                            }
                        }
                    },
                    "errors": {},
                    "id": "5",
                    "type": "utility",
                    "warnings": {},
                    "x": 680,
                    "y": 148
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "asset get splunk",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "asset_get_attributes",
                            "repoName": "community"
                        },
                        "functionId": 3,
                        "functionName": "asset_get_splunk",
                        "id": "7",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "tab": "customFunctions",
                        "type": "utility",
                        "utilities": {
                            "asset_get_attributes": {
                                "description": "Allows the retrieval of an attribute from an asset configuration for access in a playbook. This can be valuable in instances such as a dynamic note that references the Asset hostname. Must provide asset name or id.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            ""
                                        ],
                                        "description": "Asset numeric ID or asset name.",
                                        "inputType": "item",
                                        "label": "asset",
                                        "name": "asset",
                                        "placeholder": "splunk_es",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "asset_get_attributes",
                                "name": "asset_get_attributes"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "asset_get_attributes": {
                                "asset": "splunk"
                            }
                        }
                    },
                    "errors": {},
                    "id": "7",
                    "type": "utility",
                    "warnings": {},
                    "x": 680,
                    "y": 296
                },
                "8": {
                    "data": {
                        "advanced": {
                            "customName": "format es url",
                            "customNameId": 0,
                            "description": "Format a URL for the link back to the Notable ID. Change the port number as needed.",
                            "join": [],
                            "note": "Format a URL for the link back to the Notable ID. Change the port number as needed.",
                            "scope": "all"
                        },
                        "customDatapaths": {
                            "artifacts": {
                                "artifact:*.cef.event_id": {
                                    "contains": [],
                                    "isCustomDatapath": true,
                                    "label": "artifact:*.cef.event_id",
                                    "value": "artifact:*.cef.event_id"
                                }
                            }
                        },
                        "functionId": 1,
                        "functionName": "format_es_url",
                        "id": "8",
                        "parameters": [
                            "asset_get_splunk:custom_function_result.data.configuration.device",
                            "artifact:*.cef.info_min_time",
                            "artifact:*.cef.event_id"
                        ],
                        "template": "https://splunkes.com/:8000/en-US/app/SplunkEnterpriseSecuritySuite/incident_review?earliest={1}&latest=now&search=event_id%3D{2}",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "format",
                    "warnings": {},
                    "x": 340,
                    "y": 952
                }
            },
            "notes": "",
            "origin": {
                "playbook_id": 376,
                "playbook_name": "Onboarding - ES Notable Processor - Extended",
                "playbook_repo_id": 15,
                "playbook_repo_name": "Hyperion3"
            }
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.11",
        "version": "6.2.0.355"
    },
    "create_time": "2024-05-06T05:07:02.353091+00:00",
    "draft_mode": false,
    "labels": [
        "events"
    ],
    "tags": []
}